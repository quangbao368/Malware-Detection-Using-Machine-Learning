import pandas as pd
import numpy as np
import logging
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix, roc_auc_score, roc_curve, auc
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import joblib
import matplotlib.pyplot as plt

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def load_data(filepath):
    logging.info("Loading data...")
    try:
        data = pd.read_csv(filepath, delimiter=',', quotechar='"', on_bad_lines='skip', low_memory=False)
        logging.info("Data loaded successfully with columns: " + ", ".join(data.columns))
        return data
    except Exception as e:
        logging.error(f"Failed to load data: {e}")
        return None

def preprocess_data(data):
    logging.info("Preprocessing data...")
    
    # Separate features and target
    target_column = 'WRITE_SECURE_SETTINGS'
    if target_column not in data.columns:
        logging.error(f"Column {target_column} not found in data.")
        return None, None, None, None
    
    X = data.drop(target_column, axis=1)
    y = data[target_column]
    
    # Identify categorical and numerical columns
    numeric_cols = X.select_dtypes(include=[np.number]).columns.tolist()
    categorical_cols = X.select_dtypes(include=['object']).columns.tolist()
    
    # Create preprocessing pipelines
    numeric_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='mean'))])
    
    categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),
        ('onehot', OneHotEncoder(handle_unknown='ignore'))])
    
    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numeric_transformer, numeric_cols),
            ('cat', categorical_transformer, categorical_cols)])
    
    X = preprocessor.fit_transform(X)
    
    return X, y

def prepare_data(data, target_column):
    X, y = preprocess_data(data)
    if X is None or y is None:
        return None, None, None, None
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_test

def train_model(X_train, y_train):
    logging.info("Training model...")
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train, y_train)
    return model

def evaluate_model(model, X_test, y_test):
    logging.info("Evaluating model...")
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    clf_report = classification_report(y_test, y_pred)
    conf_matrix = confusion_matrix(y_test, y_pred)
    
    if len(set(y_test)) > 2:  # Check if it's a multi-class problem
        roc_auc = roc_auc_score(y_test, model.predict_proba(X_test), multi_class='ovr')
    else:
        roc_auc = roc_auc_score(y_test, model.predict_proba(X_test)[:, 1])
        
    fpr = {}
    tpr = {}
    roc_auc_dict = {}
    
    for i in range(len(set(y_test))):
        fpr[i], tpr[i], _ = roc_curve(y_test, model.predict_proba(X_test)[:, i], pos_label=i)
        roc_auc_dict[i] = auc(fpr[i], tpr[i])
    
    return accuracy, clf_report, conf_matrix, roc_auc, fpr, tpr, roc_auc_dict

def plot_roc_curve(fpr, tpr, roc_auc_dict):
    plt.figure()
    for i in fpr.keys():
        plt.plot(fpr[i], tpr[i], lw=2, label=f'Class {i} ROC curve (area = {roc_auc_dict[i]:.2f})')
    
    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic')
    plt.legend(loc="lower right")
    plt.show()

def main():
    filepath = r'your-data-setbenign.csv'
    data = load_data(filepath)
    if data is not None:
        X_train, X_test, y_train, y_test = prepare_data(data, 'WRITE_SECURE_SETTINGS')
        if X_train is not None:
            model = train_model(X_train, y_train)
            
            # Save the trained model
            model_path = r'C:\Users\quang\OneDrive\Desktop\Capstone\ML\trained_model.pkl'
            joblib.dump(model, model_path)
            logging.info(f"Model saved to {model_path}")
            
            accuracy, report, matrix, roc_auc, fpr, tpr, roc_auc_dict = evaluate_model(model, X_test, y_test)
            logging.info(f"Accuracy: {accuracy}")
            logging.info(f"Classification Report:\n{report}")
            logging.info(f"Confusion Matrix:\n{matrix}")
            logging.info(f"ROC AUC: {roc_auc}")
            plot_roc_curve(fpr, tpr, roc_auc_dict)
        else:
            logging.error("Data preparation failed due to missing target column.")
    else:
        logging.error("Data loading failed.")

if __name__ == '__main__':
    main()
