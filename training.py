import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix, roc_auc_score, roc_curve
from sklearn.impute import SimpleImputer
import matplotlib.pyplot as plt
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def load_data(filepath):
    logging.info("Loading data...")
    try:
        data = pd.read_csv(filepath, delimiter=',', quotechar='"', on_bad_lines='skip')
        logging.info("Data loaded successfully with columns: " + ", ".join(data.columns))
        return data
    except Exception as e:
        logging.error(f"Failed to load data: {e}")
        return None

def preprocess_data(data):
    logging.info("Preprocessing data...")
    # Select only numeric columns for imputation
    numeric_cols = data.select_dtypes(include=[np.number]).columns.tolist()
    if not numeric_cols:
        logging.warning("No numeric columns found for imputation.")
        return data
    
    imputer = SimpleImputer(strategy='mean')
    try:
        data[numeric_cols] = imputer.fit_transform(data[numeric_cols])
        logging.info("Missing values imputed.")
    except ValueError as e:
        logging.error(f"Imputation failed: {e}")
    
    return data

def prepare_data(data, target_column):
    if target_column not in data.columns:
        logging.error(f"Column {target_column} not found in data.")
        return None, None, None, None
    X = data.drop(target_column, axis=1)
    y = data[target_column]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_test

def train_model(X_train, y_train):
    logging.info("Training the model...")
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model

def evaluate_model(model, X_test, y_test):
    logging.info("Evaluating model...")
    predictions = model.predict(X_test)
    accuracy = accuracy_score(y_test, predictions)
    clf_report = classification_report(y_test, predictions)
    conf_matrix = confusion_matrix(y_test, predictions)
    roc_auc = roc_auc_score(y_test, model.predict_proba(X_test)[:, 1])
    fpr, tpr, _ = roc_curve(y_test, model.predict_proba(X_test)[:, 1])
    return accuracy, clf_report, conf_matrix, roc_auc, fpr, tpr

def plot_roc_curve(fpr, tpr, roc_auc):
    plt.figure()
    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')
    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic')
    plt.legend(loc="lower right")
    plt.show()

def main():
    filepath = 'TUANDROMD.csv'
    data = load_data(filepath)
    if data is not None:
        data = preprocess_data(data)
        X_train, X_test, y_train, y_test = prepare_data(data, 'Label')
        if X_train is not None:
            model = train_model(X_train, y_train)
            accuracy, report, matrix, roc_auc, fpr, tpr = evaluate_model(model, X_test, y_test)
            logging.info(f"Accuracy: {accuracy}")
            logging.info(f"Classification Report:\n{report}")
            logging.info(f"Confusion Matrix:\n{matrix}")
            logging.info(f"ROC AUC: {roc_auc}")
            plot_roc_curve(fpr, tpr, roc_auc)
        else:
            logging.error("Data preparation failed due to missing target column.")
    else:
        logging.error("Data loading failed.")

if __name__ == '__main__':
    main()
